
.log-popup input[type="text"],
.reg-popup input[type="text"],
.log-popup input[type="password"],
.reg-popup input[type="password"] {
  width: 80%;
  padding: 15px;
  margin: 22px 0px 16px 0px;
  border: none;
  background: white;
}


\this part seems to be double, overwriting the equal .form-container stats


.log-popup input[type="text"]:focus,
.reg-popup input[type="text"]:focus,
.log-popup input[type="password"]:focus,
.reg-popup input[type="password"]:focus {
  width: 80%;
  padding: 15px;
  margin: 18px 0px 12px 0px;
  border: none;
  background: white;
}

\this part is doubling as well, I think


rgb(255, 225, 225) - a nice light red touch to white



button {
  cursor: pointer;
  border: none;
  font-weight: 600;

  \it seems better practice to have at least cursor: pointer set once for all in document, should do later

  background-color: rgb(117, 116, 116);


COLOR-CODES FOR THEMES

blue
logo + bold objects - rgb(7, 94, 114)
2nd lighter - rgb(97, 245, 225)
background - rgb(99, 208, 212)

green
logo + bold objects - rgb(7, 114, 59) 
2nd lighter - rgb(122, 206, 242)
background - rgb(99, 148, 212)

yellow
logo + bold objects - rgb(154, 154, 2) 
2nd lighter - rgb(239, 232, 132)
background - rgb(204, 216, 91)

red
logo + bold objects - rgb(154, 27, 2) 
2nd lighter - rgb(239, 166, 141)
background - rgb(216, 124, 91)

header settings popups background color
rgb(217, 238, 255)


?Який функціонал я ще хочу та маю відобразити в налаштуваннях?

Підтягнути муз мелодію та налаштування на неї, бажано, щоб кожне віконце мало власне, якщо ігнорується перша мелодія,
то друга її перебиває та лишається лише "мігання", наприклад.
Показувати сповіщення у вигляді модальних вікон у браузері?

налаштування тільки для зареєстрованних користувачів або якщо є кукі - подумати, як це взагалі робиться, чи робити і скільки
там бекенду. взагалі, в дальніх планах зробити бекенд на це все.


calc(var(

  var footerPlace = document.querySelector("body").style.height;
var footerHeight = document.getElementById("foot").style.minHeight;
document.getElementById("foot").style.marginTop =
  "calc(footerPlace - footerHeight)";

  A race condition, make sure that whatever object is being accessed through the .style property access is encased in a leading if statement - like

if(document.getElementByClassname(“myClassName”).length > 0){     
    document.getElementByClassname(“myClassName”)[0].style = "yourCss = somepx;" 
} 


поставити, мабуть, плавне перемикання світла - як опцію у налаштуваннях

const button = document.getElementById('btn');

let elementClicked = false;

button.addEventListener('click', function handleClick() {
  console.log('element clicked');

  if (elementClicked) {
    console.log('button has already been clicked before');
  }

  elementClicked = true;
});

Example 2: Restrict the Button Click After a Single Click
To restrict the submit button click, write the below-provided code in the JavaScript file or the <script> tag:

var submitButton = document.getElementById('submit');
let buttonClicked = false;
submitButton.addEventListener('click', function handleClick() {
 if (buttonClicked) {
  return;
 }
 console.log('Submit button is clicked');
 buttonClicked = true;
});


подивитись якось, як робити read-time|progress-bar


About
Privacy policy
Terms of use
Contact


My other projects
© 2023 RecipeTime.com

media

consider using of <nav> for footer link group?
For URL, use link element
Use address element only for contact information
Avoid div element as much as possible

what's this? - Use download attribute for downloading a resource
It will force browsers to download linked resource to the storage.


for footer links:
.footer a:visited {
  color: silver;
}
add later

main > tooltip - empty class?

grid-template-rows: 1fr 1fr;


working fucntion code {
   const timerDiv = document.createElement("div");
  centrGrid.append(timerDiv);
}


this worked even better, but not in a row
const centrGrid = document.querySelector(".central-container");
const getTimer = document.querySelector(".window-timer");
function addTimer() {
  const timerDiv = getTimer.cloneNode(true);
  centrGrid.append(timerDiv);
}


було два типи таймерів і другий мені сдається менш перспективним, хоча і написан через атрибути attr(), які мені цікаві зараз
копіюю внутрощи контейнера-таймера в html файлі
 <div
            contenteditable="true"
            data-placeholder="Your title"
            class="title-div"
          ></div>
          <div
            contenteditable="true"
            data-placeholder="00:00"
            class="timer-div"
          ></div>
          <div
            contenteditable="true"
            data-placeholder="Here you can leave a short hint"
            class="description-div"
          ></div>
та налаштування стилів css для них. перезапишу першим типом

.title-div,
.timer-div,
.description-div {
  font-family: "Lato", sans-serif;
  font-weight: 300;
  font-size: 14px;
  border-style: solid;
  border-radius: 10px;
  border-width: 1px;
  border-color: black;
  padding-left: 10px;
  text-align: left;
  align-items: center;
  height: 90%;
  width: 80%;
  background-color: white;
  margin-top: 10px;
  margin-left: auto;
  margin-right: auto;
  overflow-y: scroll;
  overflow-x: hidden;
  display: flex;
  box-sizing: border-box;
}
.title-div:empty:before,
.timer-div:empty:before,
.description-div:empty:before {
  content: attr(data-placeholder);
  color: rgb(90, 90, 90);
  border-color: black;
}
.title-div {
  height: 25.6px;
}
.timer-div {
  height: 40px;
}
.description-div {
  height: 70px;
}


centrGrid.append(timerDiv); - that if i need to put node as last one in greed


 const title = document.centrGrid.children[n - 1].querySelector(".title-bar");
  title.setAttribute("placeholder", "Your title");


   const title = getTimer[0].querySelector(".title-bar");
  document.title.innerText = "FFF";

    document.getElementById;
  const title = getTimer[0].querySelector(".title-bar");
  document.title.innerText = "FFF";

  <div class="demo">Hello</div>
// Adding a CSS class name to an element
const element = document.querySelector('.demo');
element.classList.add('new-class');
.new-class{
    background: red;
}

// Removing an existing class from an element
const element = document.querySelector('.demo');
element.classList.removeClass('.new-class');
// Toggling a class from an element
const element = document.querySelector('.demo');
element.classList.toggleClass('.new-class');

more examples

function changeElement(id) {
  var el = document.getElementById(id);
  el.style.color = "red";
  el.style.fontSize = "15px";
  el.style.backgroundColor = "#FFFFFF";
}

function getStyleSheet(unique_title) {
  for(var i=0; i<document.styleSheets.length; i++) {
    var sheet = document.styleSheets[i];
    if(sheet.title == unique_title) {
      return sheet;
    }
  }
}

var sheet = document.createElement('style')
sheet.innerHTML = "div {border: 2px solid black; background-color: blue;}";
document.body.appendChild(sheet);

var sheetToBeRemoved = document.getElementById('styleSheetId');
var sheetParent = sheetToBeRemoved.parentNode;
sheetParent.removeChild(sheetToBeRemoved);

this one helped me to finally clear the placeholder:
<p>Clear the input field when you click on the button:</p>
<button onclick="document.getElementById('myInput').value = ''">Clear input field</button>

<input type="text" value="Blabla" id="myInput">

mb this as well

const input = document.getElementById('input');

if (input) {
   // it will remove placeholder value on focus and store with dataset variable
  input.addEventListener('focus', (e) => {
    input.dataset.placeholder = input.placeholder
    input.placeholder = '';
  });
    
  // it will reset placeholder value on blur by dataset variable
  input.addEventListener('blur', (e) => {
    input.placeholder = input.dataset.placeholder;
  });
}else{
  console.log("input is not defined",input);
}
<div class="mainInput">
  <input type="text" class="input" id="input" placeholder="Enter your todo : ">
  <button class="btn" id="btn">Submit</button>
</div>
<span> Todo list : </span>



let colorDef = document.getElementById("palette-call");
colorDef.addEventListener("click", function defColorCheck() {
  if (document.getElementById(blue).style.backgroundColor != "blue") {
    document.getElementById(blue).style.backgroundColor == "blue";
  }
});

const currentColour = document.getElementById("body").style.backgroundColor;


const currentColour = body.getAttribute("background-color");




const tr = document.getElementById("transp");
const body = document.getElementById("body");
const currentColour = document.getElementById("body").style.backgroundColor;
function transpOn() {
  if (tr.checked && currentColour == "rgb(99, 148, 212)") {
    //blue
    body.setAttribute("background-color", "rgba(99, 148, 212, 0.2)");
    alert("it works!");
  } else if (tr.checked && currentColour == "rgb(99, 208, 212)") {
    //green
    body.setAttribute("background-color", "rgba(99, 208, 212, 0.2)");
    alert("it works!");
  } else if (tr.checked && currentColour == "rgb(204, 216, 91)") {
    //yellow
    body.setAttribute("background-color", "rgba(204, 216, 91, 0.2)");
    alert("it works!");
  } else if (tr.checked && currentColour == "rgb(216, 124, 91)") {
    //red
    body.setAttribute("background-color", "rgba(216, 124, 91, 0.2)");
    alert("it works!");
  } else {
    document.body.style.backgroundColor = "rgb(216, 124, 91)";
  }
}


height: 3000px;  body

//var footerPlace = document.getPropertyValue("--footerPlacing");
//var footerHeight = document.getElementById("foot").style.minHeight;
//document.getElementById("foot").style.marginTop =
//"calc(footerPlace - footerHeight)";


 margin-top: 3000px; footer


 <style>
    :root {
      --footerSize: 200px;
      --pageHeight: 3000px;
    }
  </style>    index.html


   --pageHeight: calc(
    currentCentrHight + (--centralContrTopMarg) + minHeader + (--minBotMarg)
  );

  var minHeader = header.offsetHeight;

   margin-top: calc((--minHightHeader)+);

   + --centralContrTopMarg + --minBotMarg


fallback
   :root {
  --light-gray: #ccc;
}

p {
  color: var(--light-grey, #f0f0f0, #f9f9f9) /* No --light-grey, so #f0f0f0 is 
  used as a fallback value */
}

function switchToBlue() {
  document.getElementById("logotype").style.color = "rgb(7, 94, 114)";
  document.getElementById("head").style.backgroundColor = "rgb(122, 206, 242)";
  document.getElementById("body").style.backgroundColor = "rgb(99, 148, 212)";
  document.getElementById("foot").style.backgroundColor = "rgb(7, 94, 114)";
}

function switchToGreen() {
  document.getElementById("logotype").style.color = "rgb(7, 114, 59)";
  document.getElementById("head").style.backgroundColor = "rgb(97, 245, 225)";
  document.getElementById("body").style.backgroundColor = "rgb(99, 208, 212)";
  document.getElementById("foot").style.backgroundColor = "rgb(7, 114, 59)";
}

function switchToYellow() {
  document.getElementById("logotype").style.color = "rgb(154, 154, 2)";
  document.getElementById("head").style.backgroundColor = "rgb(239, 232, 132)";
  document.getElementById("body").style.backgroundColor = "rgb(204, 216, 91)";
  document.getElementById("foot").style.backgroundColor = "rgb(154, 154, 2)";
}

function switchToRed() {
  document.getElementById("logotype").style.color = "rgb(154, 27, 2)";
  document.getElementById("head").style.backgroundColor = "rgb(239, 166, 141)";
  document.getElementById("body").style.backgroundColor = "rgb(216, 124, 91)";
  document.getElementById("foot").style.backgroundColor = "rgb(154, 27, 2)";
}


const colorTheme = {
  blue: {
    "--bold-color": "rgb(7, 94, 114)",
    "--lighter-color": "rgb(97, 245, 225)",
    "--background-color": "rgb(99, 208, 212)",
  },
  green: {
    "--bold-color": "rgb(7, 114, 59)",
    "--lighter-color": "rgb(122, 206, 242)",
    "--background-color": "rgb(99, 148, 212)",
  },
  yellow: {
    "--bold-color": "rgb(154, 154, 2)",
    "--lighter-color": "rgb(239, 232, 132)",
    "--background-color": "rgb(204, 216, 91)",
  },
  red: {
    "--bold-color": "rgb(154, 27, 2)",
    "--lighter-color": "rgb(239, 166, 141)",
    "--background-color": "rgb(216, 124, 91)",
  },
};

function useColor(colorChoice) {
  document.documentElement.style.setProperty(
    '--bold-color',
    colorTheme\[colorChoice\]['--bold-color']
  );
  document.documentElement.style.setProperty(
    '--lighter-color',
    colorTheme\[colorChoice\]['--lighter-color']
  );
  document.documentElement.style.setProperty(
    '--background-color',
    colorTheme\[colorChoice\]['--background-color']
  );
}

const toggle = doucment.querySelector("#transp");
toggle.addEventListener("change", switchTransp, false);
const transptheme = {
  trblue: {
    "--bold-color": "rgb(7, 94, 114)",
    "--lighter-color": "rgb(97, 245, 225)",
    "--background-color": "rgba(99, 208, 212, 0.2)",
  },
  trgreen: {
    "--bold-color": "rgb(7, 114, 59)",
    "--lighter-color": "rgb(122, 206, 242)",
    "--background-color": "rgba(99, 148, 212, 0.2)",
  },
  tryellow: {
    "--bold-color": "rgb(154, 154, 2)",
    "--lighter-color": "rgb(239, 232, 132)",
    "--background-color": "rgba(204, 216, 91, 0.2)",
  },
  trred: {
    "--bold-color": "rgb(154, 27, 2)",
    "--lighter-color": "rgb(239, 166, 141)",
    "--background-color": "rgba(216, 124, 91, 0.2)",
  },
};





//function switchTransp(e) {
//if (e.target.checked) {
//  useTransp('')
// }
//}


const tr = document.getElementById("transp");

function transpOn() {
  if (tr.checked) {
    var currentColour = document.getElementById("body").style.backgroundColor;
    if (currentColour == "rgb(99, 148, 212)") {
      //blue
      body.setAttribute("background-color", "rgba(99, 148, 212, 0.2)");
      alert("it works!");
    } else if (currentColour == "rgb(99, 208, 212)") {
      //green
      body.setAttribute("background-color", "rgba(99, 208, 212, 0.2)");
      alert("it works!");
    } else if (currentColour == "rgb(204, 216, 91)") {
      //yellow
      body.setAttribute("background-color", "rgba(204, 216, 91, 0.2)");
      alert("it works!");
    } else if (currentColour == "rgb(216, 124, 91)") {
      //red
      body.setAttribute("background-color", "rgba(216, 124, 91, 0.2)");
      alert("it works!");
    }
  } else {
    document.body.style.backgroundColor = "rgb(216, 124, 91)";
    alert("it's cursed!");
  }
}

onclick="transpOn()"


const switchTransp = document.querySelector("#transp");
switchTransp.addEventListener("change", setTransp, false);
function setTransp(e) {
  if (e.target.checked) {
    let body = document.getElementById("body");
    body.style.backgroundColor = "rgba(216, 124, 91, 0.2)";
  } else {
    let body = document.getElementById("body");
    body.style.backgroundColor = "rgb(216, 124, 91)";
  }
}

const red = document.getElementById("red");
function scheme() {}

let currentColor = false;

const validColors = ["Blue", "Green", "Yellow", "Red"];
attr = {
  name: "color",
  onchange: (event) => {
    currentColor = event.currentColor.value;
  },
  type: "radio",
};
for (attr.value of validColors) color - buttons - container.__make("label");

const a = document.querySelector("#transp");
a.addEventListener("change", setTransp, false);
function setTransp() {
  switchToBlue();
  switchToGreen();
  switchToYellow();
  switchToRed();
}

function switchToBlue() {
  document.getElementById("logotype").style.color = "rgb(7, 94, 114)";
  document.getElementById("head").style.backgroundColor = "rgb(122, 206, 242)";
  document.getElementById("body").style.backgroundColor = "rgb(99, 148, 212)";
  document.getElementById("foot").style.backgroundColor = "rgb(7, 94, 114)";
}

function switchToGreen() {
  document.getElementById("logotype").style.color = "rgb(7, 114, 59)";
  document.getElementById("head").style.backgroundColor = "rgb(97, 245, 225)";
  document.getElementById("body").style.backgroundColor = "rgb(99, 208, 212)";
  document.getElementById("foot").style.backgroundColor = "rgb(7, 114, 59)";
}

function switchToYellow() {
  document.getElementById("logotype").style.color = "rgb(154, 154, 2)";
  document.getElementById("head").style.backgroundColor = "rgb(239, 232, 132)";
  document.getElementById("body").style.backgroundColor = "rgb(204, 216, 91)";
  document.getElementById("foot").style.backgroundColor = "rgb(154, 154, 2)";
}

function switchToRed() {
  document.getElementById("logotype").style.color = "rgb(154, 27, 2)";
  document.getElementById("head").style.backgroundColor = "rgb(239, 166, 141)";
  document.getElementById("body").style.backgroundColor = "rgb(216, 124, 91)";
  document.getElementById("foot").style.backgroundColor = "rgb(154, 27, 2)";
}


radiobtn = document.getElementById("theid");
radiobtn.checked = true;


<button onclick="getElementValue()">Get Value of Input Field</button>

function getElementValue() { var value = document.querySelector("select").value; }

180 symbols

function resetId() {
  centrGrid.insertBefore(timerDiv, centrGrid.children[3]);
  let r = document.getElementById("timer4");
  centrGrid.removeChild(r);
}

button type='submit'


 стилі за замовчуванням, "занулення" 


 
/*function resetId() {
  centrGrid.insertBefore(timerDiv, centrGrid.children[3]);
  let r = document.getElementById("timer4");
  centrGrid.removeChild(r);
}*/

The tag name passed is lower-cased internally before searching for elements. So, for svg elements, use getElementsByTagNameNS().

npm list -g
style.id = "close" + (i + 1);


